local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "XYLO AUTOFARM",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "XYLO AUTOFARM CITY BUS",
   LoadingSubtitle = "Dev version",
   ShowText = "XYLO Dev HUB", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "c5uVTcHtzJ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "XYLO TEST VERSION",
      Subtitle = "Key System",
      Note = "TEST KEY IN https://discord.gg/c5uVTcHtzJ", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"XYLOHUBTEST123VERSION"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local DevTab = Window:CreateTab("Developer", nil) -- Title, Image
local Section = DevTab:CreateSection("Main")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- ================================
-- Konfiguration
-- ================================
local TWEEN_SPEED = 0.1 -- Sekunde pro Studeneinheit (je niedriger, desto schneller)

-- ================================
-- UI-Callback
-- ================================
local Toggle = DevTab:CreateToggle({
    Name = "AUTOFARM",
    CurrentValue = false,
    Flag = "AFCB",
    Callback = function(Value)
        if not Value then return end

        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local hrp = character:WaitForChild("HumanoidRootPart")

        local function vec(x, y, z)
            return Vector3.new(x, y, z)
        end

        local function walkTo(position)
            humanoid:MoveTo(position)
            local conn
            local reached = false

            conn = humanoid.MoveToFinished:Connect(function(success)
                reached = success
            end)

            while not reached and (hrp.Position - position).Magnitude > 2 do
                RunService.Heartbeat:Wait()
            end

            conn:Disconnect()
            task.wait(math.random(2, 4) / 10)
        end

        local function sitInSeat(seat)
            if seat and seat:IsA("Seat") then
                hrp.CFrame = seat.CFrame * CFrame.new(0, 2, 0)
                task.wait(0.2)
                humanoid.Sit = true
            end
        end

        local function tweenMove(model, targetPos)
            local primary = model.PrimaryPart or model:FindFirstChild("DriveSeat")
            if not primary then return end

            -- Ziel-CFrame mit Rotation in Richtung Zielpunkt
            local currentPos = primary.Position
            local lookDirection = (targetPos - currentPos).Unit
            local rotation = CFrame.new(Vector3.zero, lookDirection)
            local finalCFrame = CFrame.new(targetPos) * CFrame.Angles(0, rotation.Y, 0)

            -- Dauer berechnen basierend auf Distanz & Speed
            local distance = (currentPos - targetPos).Magnitude
            local duration = distance * TWEEN_SPEED

            -- Tween
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
            local goal = {CFrame = finalCFrame}
            local tween = TweenService:Create(primary, tweenInfo, goal)
            tween:Play()
            tween.Completed:Wait()
        end

        -----------------------------------------
        -- Starte den Autofarm
        -----------------------------------------
        walkTo(vec(-1731, 6, -1281))
        task.wait(0.6 + math.random())
        ReplicatedStorage.Bnl["69141aa3-8c6a-4eee-ab58-c7805873c0ee"]:FireServer()
        task.wait(0.5)
        ReplicatedStorage.Bnl["aeb8d87a-20a0-48e5-8249-ddf516b4dbe8"]:FireServer("City Bus Driver")
        task.wait(0.5)
        ReplicatedStorage.Bnl["69141aa3-8c6a-4eee-ab58-c7805873c0ee"]:FireServer()
        task.wait(0.5)

        walkTo(vec(-1723, 6, -1266))
        task.wait(0.4)
        ReplicatedStorage.Bnl["e8f3d225-1be6-487b-9572-36254957b902"]:FireServer("Mercedes Citaro Bus Driver")
        task.wait(0.5)

        walkTo(vec(-1716, 6, -1267))
        task.wait(0.5)

        walkTo(vec(-1715, 5, -1256))
        task.wait(0.5)

        walkTo(vec(-1735, 5, -1259))
        task.wait(1)

        local bus = Workspace.Vehicles:WaitForChild("Fndkdndiddn")
        local seat = bus:WaitForChild("DriveSeat")

        ReplicatedStorage.Bnl["fdffc7c3-4c83-4693-8a33-380ed2d60083"]:FireServer(seat, "Oj2", false)
        task.wait(0.5)
        ReplicatedStorage.Bnl["1109ee8f-65c5-435b-9ad7-e13b83f79aeb"]:FireServer(bus, true)
        task.wait(1)

        -- Fahrpunkte definieren
        local points = {
            vec(-1723, 60, -1266),
            vec(-510, 60, 831),
            vec(-510, 10, 831),
            vec(-510, 60, 831),
            vec(112, 60, 1612),
            vec(112, 10, 1612),
        }

        for _, point in ipairs(points) do
            tweenMove(bus, point)
            task.wait(1)
        end

        Toggle:Set(false)
    end,
})






