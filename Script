local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "XYLO AUTOFARM",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "XYLO AUTOFARM CITY BUS",
   LoadingSubtitle = "Dev version",
   ShowText = "XYLO Dev HUB", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "c5uVTcHtzJ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "XYLO TEST VERSION",
      Subtitle = "Key System",
      Note = "TEST KEY IN https://discord.gg/c5uVTcHtzJ", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"XYLOHUBTEST123VERSION"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local DevTab = Window:CreateTab("Developer", nil) -- Title, Image
local Section = DevTab:CreateSection("Main")

local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

-- ================================
-- Konfiguration
-- ================================
local BUS_NAME = "Fndkdndiddn" -- Name deines Busses im Workspace.Vehicles
local TWEEN_SPEED = 0.1 -- Sekunde pro Studeneinheit (je niedriger, desto schneller)

-- ================================
-- Toggle aktivieren
-- ================================
local Toggle = DevTab:CreateToggle({
    Name = "AUTOFARM",
    CurrentValue = false,
    Flag = "AFCB",
    Callback = function(Value)
        if not Value then return end

        -- Warten bis Bus geladen ist
        local bus = Workspace.Vehicles:WaitForChild(BUS_NAME)
        local primary = bus.PrimaryPart or bus:FindFirstChild("DriveSeat")
        if not primary then warn("Bus hat keine g√ºltige PrimaryPart!"); return end

        -- Tween-Move Funktion mit Rotation
        local function tweenMove(targetPos)
            local currentPos = primary.Position
            local direction = (targetPos - currentPos).Unit
            local rotation = CFrame.new(Vector3.zero, direction)
            local finalCFrame = CFrame.new(targetPos) * CFrame.Angles(0, rotation.Y, 0)

            local distance = (targetPos - currentPos).Magnitude
            local duration = distance * TWEEN_SPEED

            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
            local goal = {CFrame = finalCFrame}
            local tween = TweenService:Create(primary, tweenInfo, goal)
            tween:Play()
            tween.Completed:Wait()
        end

        -- Zielpunkte
        local function vec(x, y, z) return Vector3.new(x, y, z) end

        local points = {
            vec(-1723, 60, -1266),
            vec(-510, 60, 831),
            vec(-510, 10, 831),
            vec(-510, 60, 831),
            vec(112, 60, 1612),
            vec(112, 10, 1612),
        }

        for _, point in ipairs(points) do
            tweenMove(point)
            task.wait(1)
        end

        Toggle:Set(false)
    end,
})



